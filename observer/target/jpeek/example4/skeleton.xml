<?xml version="1.0" encoding="UTF-8"?>
<skeleton date="2020-12-26T14:51:41.087553900Z"
          schema="xsd/skeleton.xsd"
          version="${project.version}">
   <app id="D:\HSE\BUSINESS RF\JPEEK DOCS\java patterns\observer\out\production\observer\org\jpeek\patterns\example4">
      <package id="org.jpeek.patterns.example4">
         <class id="Observer"><!--Package: org.jpeek.patterns.example4; name: org.jpeek.patterns.example4.Observer; file: org.jpeek.patterns.example4.Observer-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/jpeek/patterns/example4/Subject">subject</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="update"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="Subject"><!--Package: org.jpeek.patterns.example4; name: org.jpeek.patterns.example4.Subject; file: org.jpeek.patterns.example4.Subject-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">observers</attribute>
               <attribute final="false" public="false" static="false" type="I">state</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">observers</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">state</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="setState"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">state</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.notifyAllObservers</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/jpeek/patterns/example4/Observer;)V"
                       name="attach"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/jpeek/patterns/example4/Observer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">observers</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notifyAllObservers"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">observers</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Observer.update</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OctalObserver"><!--Package: org.jpeek.patterns.example4; name: org.jpeek.patterns.example4.OctalObserver; file: org.jpeek.patterns.example4.OctalObserver-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/jpeek/patterns/example4/Subject;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/jpeek/patterns/example4/Subject">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Observer.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">subject</op>
                     <op code="get">subject</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.attach</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example4/Observer">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="update"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="get">subject</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.getState</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.toOctalString</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Example4Demo"><!--Package: org.jpeek.patterns.example4; name: org.jpeek.patterns.example4.Example4Demo; file: org.jpeek.patterns.example4.Example4Demo-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="main"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.HexalObserver.&lt;init&gt;</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example4/Subject">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.OctalObserver.&lt;init&gt;</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example4/Subject">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.BinaryObserver.&lt;init&gt;</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example4/Subject">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.setState</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.setState</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BinaryObserver"><!--Package: org.jpeek.patterns.example4; name: org.jpeek.patterns.example4.BinaryObserver; file: org.jpeek.patterns.example4.BinaryObserver-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/jpeek/patterns/example4/Subject;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/jpeek/patterns/example4/Subject">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Observer.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">subject</op>
                     <op code="get">subject</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.attach</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example4/Observer">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="update"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="get">subject</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.getState</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.toBinaryString</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HexalObserver"><!--Package: org.jpeek.patterns.example4; name: org.jpeek.patterns.example4.HexalObserver; file: org.jpeek.patterns.example4.HexalObserver-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/jpeek/patterns/example4/Subject;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/jpeek/patterns/example4/Subject">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Observer.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">subject</op>
                     <op code="get">subject</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.attach</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example4/Observer">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="update"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="get">subject</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example4.Subject.getState</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.Integer.toHexString</name>
                        <args>
                           <arg type="I">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.lang.String.toUpperCase</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
   </app>
</skeleton>
