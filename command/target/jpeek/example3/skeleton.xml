<?xml version="1.0" encoding="UTF-8"?>
<skeleton date="2020-12-26T02:27:36.961146800Z"
          schema="xsd/skeleton.xsd"
          version="${project.version}">
   <app id="D:\HSE\BUSINESS RF\JPEEK DOCS\java patterns\command\out\production\command\org\jpeek\patterns\example3">
      <package id="org.jpeek.patterns.example3">
         <class id="SellStock"><!--Package: org.jpeek.patterns.example3; name: org.jpeek.patterns.example3.SellStock; file: org.jpeek.patterns.example3.SellStock-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/jpeek/patterns/example3/Stock">abcStock</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/jpeek/patterns/example3/Stock;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/jpeek/patterns/example3/Stock">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">abcStock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="execute"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">abcStock</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Stock.sell</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BuyStock"><!--Package: org.jpeek.patterns.example3; name: org.jpeek.patterns.example3.BuyStock; file: org.jpeek.patterns.example3.BuyStock-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/jpeek/patterns/example3/Stock">abcStock</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/jpeek/patterns/example3/Stock;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/jpeek/patterns/example3/Stock">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">abcStock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="execute"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">abcStock</op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Stock.buy</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Broker"><!--Package: org.jpeek.patterns.example3; name: org.jpeek.patterns.example3.Broker; file: org.jpeek.patterns.example3.Broker-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">orderList</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.ArrayList.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">orderList</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/jpeek/patterns/example3/Order;)V"
                       name="takeOrder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/jpeek/patterns/example3/Order">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">orderList</op>
                     <op code="call">
                        <name>java.util.List.add</name>
                        <args>
                           <arg type="Ljava/lang/Object">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="placeOrders"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">orderList</op>
                     <op code="call">
                        <name>java.util.List.iterator</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.hasNext</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>java.util.Iterator.next</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Order.execute</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="get">orderList</op>
                     <op code="call">
                        <name>java.util.List.clear</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Example3Demo"><!--Package: org.jpeek.patterns.example3; name: org.jpeek.patterns.example3.Example3Demo; file: org.jpeek.patterns.example3.Example3Demo-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="main"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Stock.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.BuyStock.&lt;init&gt;</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example3/Stock">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.SellStock.&lt;init&gt;</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example3/Stock">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Broker.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Broker.takeOrder</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example3/Order">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Broker.takeOrder</name>
                        <args>
                           <arg type="Lorg/jpeek/patterns/example3/Order">?</arg>
                        </args>
                     </op>
                     <op code="call">
                        <name>org.jpeek.patterns.example3.Broker.placeOrders</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Stock"><!--Package: org.jpeek.patterns.example3; name: org.jpeek.patterns.example3.Stock; file: org.jpeek.patterns.example3.Stock-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">name</attribute>
               <attribute final="false" public="false" static="false" type="I">quantity</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">
                        <name>java.lang.Object.&lt;init&gt;</name>
                        <args>
                           <arg type="">?</arg>
                        </args>
                     </op>
                     <op code="put">name</op>
                     <op code="put">quantity</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="get">name</op>
                     <op code="get">quantity</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="sell"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="get">name</op>
                     <op code="get">quantity</op>
                     <op code="call">
                        <name>java.io.PrintStream.println</name>
                        <args>
                           <arg type="Ljava/lang/String">?</arg>
                        </args>
                     </op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
   </app>
</skeleton>
